{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"title": "VS Code Debug Protocol",
	"description": "A json schema for the VS Code Debug Protocol",
	"type": "object",

	"definitions": {

		"ProtocolMessage": {
			"type": "object",
			"description": "Base class of requests, responses, and events.",
			"properties": {
				"seq": {
					"type": "integer",
					"description": "Sequence number."
				},
				"type": {
					"type": "string",
					"description": "One of 'request', 'response', or 'event'.",
					"_enum": [ "request", "response", "event" ]
				}
			},
			"required": [ "seq", "type" ]
		},

		"Request": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "A client or server-initiated request.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "request" ]
					},
					"command": {
						"type": "string",
						"description": "The command to execute."
					},
					"arguments": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Object containing arguments for the command."
					}
				},
				"required": [ "type", "command" ]
			}]
		},

		"Event": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "Server-initiated event.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "event" ]
					},
					"event": {
						"type": "string",
						"description": "Type of event."
					},
					"body": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Event-specific information."
					}
				},
				"required": [ "type", "event" ]
			}]
		},

		"Response": {
			"allOf": [ { "$ref": "#/definitions/ProtocolMessage" }, {
				"type": "object",
				"description": "Response to a request.",
				"properties": {
					"type": {
						"type": "string",
						"enum": [ "response" ]
					},
					"request_seq": {
						"type": "integer",
						"description": "Sequence number of the corresponding request."
					},
					"success": {
						"type": "boolean",
						"description": "Outcome of the request."
					},
					"command": {
						"type": "string",
						"description": "The command requested."
					},
					"message": {
						"type": "string",
						"description": "Contains error message if success == false."
					},
					"body": {
						"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
						"description": "Contains request result if success is true and optional error details if success is false."
					}
				},
				"required": [ "type", "request_seq", "success", "command" ]
			}]
		},

		"InitializedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'initialized' event type.\nThis event indicates that the debug adapter is ready to accept configuration requests (e.g. SetBreakpointsRequest, SetExceptionBreakpointsRequest).\nA debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the InitializeRequest has finished).\nThe sequence of events/requests is as follows:\n- adapters sends InitializedEvent (after the InitializeRequest has returned)\n- frontend sends zero or more SetBreakpointsRequest\n- frontend sends one SetFunctionBreakpointsRequest\n- frontend sends a SetExceptionBreakpointsRequest if one or more exceptionBreakpointFilters have been defined (or if supportsConfigurationDoneRequest is not defined or false)\n- frontend sends other future configuration requests\n- frontend sends one ConfigurationDoneRequest to indicate the end of the configuration",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "initialized" ]
					}
				},
				"required": [ "event" ]
			}]
		},

		"StoppedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'stopped' event type.\nThe event indicates that the execution of the debuggee has stopped due to some condition.\nThis can be caused by a break point previously set, a stepping action has completed, by executing a debugger statement etc.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "stopped" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"reason": {
								"type": "string",
								"description": "The reason for the event (such as: 'step', 'breakpoint', 'exception', 'pause'). This string is shown in the UI.",
								"_enum": [ "step", "breakpoint", "exception", "pause" ]
							},
							"threadId": {
								"type": "integer",
								"description": "The thread which was stopped."
							},
							"text": {
								"type": "string",
								"description": "Additional information. E.g. if reason is 'exception', text contains the exception name. This string is shown in the UI."
							},
							"allThreadsStopped": {
								"type": "boolean",
								"description": "If allThreadsStopped is true, a debug adapter can announce that all threads have stopped.\n*  The client should use this information to enable that all threads can be expanded to access their stacktraces.\n*  If the attribute is missing or false, only the thread with the given threadId can be expanded."
							}
						},
						"required": [ "reason" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"ContinuedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'continued' event type.\nThe event indicates that the execution of the debuggee has continued.\nPlease note: a debug adapter is not expected to send this event in response to a request that implies that execution continues, e.g. 'launch' or 'continue'.\nIt is only necessary to send a ContinuedEvent if there was no previous request that implied this.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "continued" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"threadId": {
								"type": "integer",
								"description": "The thread which was continued."
							},
							"allThreadsContinued": {
								"type": "boolean",
								"description": "If allThreadsContinued is true, a debug adapter can announce that all threads have continued."
							}
						},
						"required": [ "threadId" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"ExitedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'exited' event type.\nThe event indicates that the debuggee has exited.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "exited" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"exitCode": {
								"type": "integer",
								"description": "The exit code returned from the debuggee."
							}
						},
						"required": [ "exitCode" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"TerminatedEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'terminated' event types.\nThe event indicates that debugging of the debuggee has terminated.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "terminated" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"restart": {
								"type": "boolean",
								"description": "A debug adapter may set 'restart' to true to request that the front end restarts the session."
							}
						}
					}
				},
				"required": [ "event" ]
			}]
		},

		"ThreadEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'thread' event type.\nThe event indicates that a thread has started or exited.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "thread" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"reason": {
								"type": "string",
								"description": "The reason for the event (such as: 'started', 'exited').",
								"_enum": [ "started", "exited" ]
							},
							"threadId": {
								"type": "integer",
								"description": "The identifier of the thread."
							}
						},
						"required": ["reason", "threadId"]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"OutputEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'output' event type.\nThe event indicates that the target has produced output.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "output" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"category": {
								"type": "string",
								"description": "The category of output (such as: 'console', 'stdout', 'stderr', 'telemetry'). If not specified, 'console' is assumed.",
								"_enum": [ "console", "stdout", "stderr", "telemetry" ]
							},
							"output": {
								"type": "string",
								"description": "The output to report."
							},
							"data": {
								"type": [ "array", "boolean", "integer", "null", "number" , "object", "string" ],
								"description": "Optional data to report. For the 'telemetry' category the data will be sent to telemetry, for the other categories the data is shown in JSON format."
							}
						},
						"required": ["output"]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"BreakpointEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'breakpoint' event type.\nThe event indicates that some information about a breakpoint has changed.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "breakpoint" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"reason": {
								"type": "string",
								"description": "The reason for the event (such as: 'changed', 'new').",
								"_enum": [ "changed", "new" ]
							},
							"breakpoint": {
								"$ref": "#/definitions/Breakpoint",
								"description": "The breakpoint."
							}
						},
						"required": [ "reason", "breakpoint" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"ModuleEvent": {
			"allOf": [ { "$ref": "#/definitions/Event" }, {
				"type": "object",
				"description": "Event message for 'module' event type.\nThe event indicates that some information about a module has changed.",
				"properties": {
					"event": {
						"type": "string",
						"enum": [ "module" ]
					},
					"body": {
						"type": "object",
						"properties": {
							"reason": {
								"type": "string",
								"description": "The reason for the event.",
								"enum": [ "new", "changed", "removed" ]
							},
							"module": {
								"$ref": "#/definitions/Module",
								"description": "The new, changed, or removed module. In case of 'removed' only the module id is used."
							}
						},
						"required": [ "reason", "module" ]
					}
				},
				"required": [ "event", "body" ]
			}]
		},

		"RunInTerminalRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "runInTerminal request; value of command field is 'runInTerminal'.\nWith this request a debug adapter can run a command in a terminal.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "runInTerminal" ]
					},
					"arguments": {
						"$ref": "#/definitions/RunInTerminalRequestArguments"
					}
				},
				"required": [ "command", "arguments" ]
			}]
		},
		"RunInTerminalRequestArguments": {
			"type": "object",
			"description": "Arguments for 'runInTerminal' request.",
			"properties": {
				"kind": {
					"type": "string",
					"enum": [ "integrated", "external" ],
					"description": "What kind of terminal to launch."
				},
				"title": {
					"type": "string",
					"description": "Optional title of the terminal."
				},
				"cwd": {
					"type": "string",
					"description": "Working directory of the command."
				},
				"args": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "List of arguments. The first argument is the command to run."
				},
				"env": {
					"type": "object",
					"description": "Environment key-value pairs that are added to the default environment.",
					"additionalProperties": {
						"type": "string",
						"description": "Values must be strings."
					}
				}
			},
			"required": [ "args", "cwd" ]
		},
		"RunInTerminalResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to Initialize request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"processId": {
								"type": "number",
								"description": "The process ID."
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},

		"ErrorResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "On error that is whenever 'success' is false, the body can provide more details.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"error": {
								"$ref": "#/definitions/Message",
								"description": "An optional, structured error message."
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},

		"InitializeRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Initialize request; value of command field is 'initialize'.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "initialize" ]
					},
					"arguments": {
						"$ref": "#/definitions/InitializeRequestArguments"
					}
				},
				"required": [ "command", "arguments" ]
			}]
		},
		"InitializeRequestArguments": {
			"type": "object",
			"description": "Arguments for 'initialize' request.",
			"properties": {
				"adapterID": {
					"type": "string",
					"description": "The ID of the debugger adapter. Used to select or verify debugger adapter."
				},
				"linesStartAt1": {
					"type": "boolean",
					"description": "If true all line numbers are 1-based (default)."
				},
				"columnsStartAt1": {
					"type": "boolean",
					"description": "If true all column numbers are 1-based (default)."
				},
				"pathFormat": {
					"type": "string",
					"_enum": [ "path", "uri" ],
					"description": "Determines in what format paths are specified. Possible values are 'path' or 'uri'. The default is 'path', which is the native format."
				},
				"supportsVariableType": {
					"type": "boolean",
					"description": "Client supports the optional type attribute for variables."
				},
				"supportsVariablePaging": {
					"type": "boolean",
					"description": "Client supports the paging of variables."
				},
				"supportsRunInTerminalRequest": {
					"type": "boolean",
					"description": "Client supports the runInTerminal request."
				}
			},
			"required": [ "adapterID" ]
		},
		"InitializeResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'initialize' request.",
				"properties": {
					"body": {
						"$ref": "#/definitions/Capabilities",
						"description": "The capabilities of this debug adapter."
					}
				}
			}]
		},

		"ConfigurationDoneRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "ConfigurationDone request; value of command field is 'configurationDone'.\nThe client of the debug protocol must send this request at the end of the sequence of configuration requests (which was started by the InitializedEvent).",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "configurationDone" ]
					},
					"arguments": {
						"$ref": "#/definitions/ConfigurationDoneArguments"
					}
				},
				"required": [ "command" ]
			}]
		},
		"ConfigurationDoneArguments": {
			"type": "object",
			"description": "Arguments for 'configurationDone' request.\nThe configurationDone request has no standardized attributes."
		},
		"ConfigurationDoneResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'configurationDone' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"LaunchRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Launch request; value of command field is 'launch'.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "launch" ]
					},
					"arguments": {
						"$ref": "#/definitions/LaunchRequestArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"LaunchRequestArguments": {
			"type": "object",
			"description": "Arguments for 'launch' request.",
			"properties": {
				"noDebug": {
					"type": "boolean",
					"description": "If noDebug is true the launch request should launch the program without enabling debugging."
				}
			}
		},
		"LaunchResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'launch' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"AttachRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Attach request; value of command field is 'attach'.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "attach" ]
					},
					"arguments": {
						"$ref": "#/definitions/AttachRequestArguments"
					}
				},
				"required": [ "command", "arguments" ]
			}]
		},
		"AttachRequestArguments": {
			"type": "object",
			"description": "Arguments for 'attach' request.\nThe attach request has no standardized attributes."
		},
		"AttachResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'attach' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"DisconnectRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Disconnect request; value of command field is 'disconnect'.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "disconnect" ]
					},
					"arguments": {
						"$ref": "#/definitions/DisconnectArguments"
					}
				},
				"required": [ "command" ]
			}]
		},
		"DisconnectArguments": {
			"type": "object",
			"description": "Arguments for 'disconnect' request.\nThe disconnect request has no standardized attributes."
		},
		"DisconnectResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'disconnect' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"SetBreakpointsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "SetBreakpoints request; value of command field is 'setBreakpoints'.\nSets multiple breakpoints for a single source and clears all previous breakpoints in that source.\nTo clear all breakpoint for a source, specify an empty array.\nWhen a breakpoint is hit, a StoppedEvent (event type 'breakpoint') is generated.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "setBreakpoints" ]
					},
					"arguments": {
						"$ref": "#/definitions/SetBreakpointsArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"SetBreakpointsArguments": {
			"type": "object",
			"description": "Arguments for 'setBreakpoints' request.",
			"properties": {
				"source": {
					"$ref": "#/definitions/Source",
					"description": "The source location of the breakpoints; either source.path or source.reference must be specified."
				},
				"breakpoints": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/SourceBreakpoint"
					},
					"description": "The code locations of the breakpoints."
				},
				"lines": {
					"type": "array",
					"items": {
						"type": "integer"
					},
					"description": "Deprecated: The code locations of the breakpoints."
				},
				"sourceModified": {
					"type": "boolean",
					"description": "A value of true indicates that the underlying source has been modified which results in new breakpoint locations."
				}
			},
			"required": [ "source" ]
		},
		"SetBreakpointsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'setBreakpoints' request.\nReturned is information about each breakpoint created by this request.\nThis includes the actual code location and whether the breakpoint could be verified.\nThe breakpoints returned are in the same order as the elements of the 'breakpoints'\n(or the deprecated 'lines') in the SetBreakpointsArguments.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"breakpoints": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Breakpoint"
								},
								"description": "Information about the breakpoints. The array elements are in the same order as the elements of the 'breakpoints' (or the deprecated 'lines') in the SetBreakpointsArguments."
							}
						},
						"required": [ "breakpoints" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"SetFunctionBreakpointsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "SetFunctionBreakpoints request; value of command field is 'setFunctionBreakpoints'.\nSets multiple function breakpoints and clears all previous function breakpoints.\nTo clear all function breakpoint, specify an empty array.\nWhen a function breakpoint is hit, a StoppedEvent (event type 'function breakpoint') is generated.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "setFunctionBreakpoints" ]
					},
					"arguments": {
						"$ref": "#/definitions/SetFunctionBreakpointsArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"SetFunctionBreakpointsArguments": {
			"type": "object",
			"description": "Arguments for 'setFunctionBreakpoints' request.",
			"properties": {
				"breakpoints": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/FunctionBreakpoint"
					},
					"description": "The function names of the breakpoints."
				}
			},
			"required": [ "breakpoints" ]
		},
		"SetFunctionBreakpointsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'setFunctionBreakpoints' request.\nReturned is information about each breakpoint created by this request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"breakpoints": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Breakpoint"
								},
								"description": "Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array."
							}
						},
						"required": [ "breakpoints" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"SetExceptionBreakpointsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "SetExceptionBreakpoints request; value of command field is 'setExceptionBreakpoints'.\nEnable that the debuggee stops on exceptions with a StoppedEvent (event type 'exception').",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "setExceptionBreakpoints" ]
					},
					"arguments": {
						"$ref": "#/definitions/SetExceptionBreakpointsArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"SetExceptionBreakpointsArguments": {
			"type": "object",
			"description": "Arguments for 'setExceptionBreakpoints' request.",
			"properties": {
				"filters": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Names of enabled exception breakpoints."
				}
			},
			"required": [ "filters" ]
		},
		"SetExceptionBreakpointsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'setExceptionBreakpoints' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"ContinueRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Continue request; value of command field is 'continue'.\nThe request starts the debuggee to run again.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "continue" ]
					},
					"arguments": {
						"$ref": "#/definitions/ContinueArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"ContinueArguments": {
			"type": "object",
			"description": "Arguments for 'continue' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Continue execution for the specified thread (if possible). If the backend cannot continue on a single thread but will continue on all threads, it should set the allThreadsContinued attribute in the response to true."
				}
			},
			"required": [ "threadId" ]
		},
		"ContinueResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'continue' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"allThreadsContinued": {
								"type": "boolean",
								"description": "If true, the continue request has ignored the specified thread and continued all threads instead. If this attribute is missing a value of 'true' is assumed for backward compatibility."
							}
						}
					}
				},
				"required": [ "body" ]
			}]
		},

		"NextRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Next request; value of command field is 'next'.\nThe request starts the debuggee to run again for one step.\nThe debug adapter first sends the NextResponse and then a StoppedEvent (event type 'step') after the step has completed.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "next" ]
					},
					"arguments": {
						"$ref": "#/definitions/NextArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"NextArguments": {
			"type": "object",
			"description": "Arguments for 'next' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Continue execution for this thread."
				}
			},
			"required": [ "threadId" ]
		},
		"NextResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'next' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"StepInRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "StepIn request; value of command field is 'stepIn'.\nThe request starts the debuggee to step into a function/method if possible.\nIf it cannot step into a target, 'stepIn' behaves like 'next'.\nThe debug adapter first sends the StepInResponse and then a StoppedEvent (event type 'step') after the step has completed.\nIf there are multiple function/method calls (or other targets) on the source line,\nthe optional argument 'targetId' can be used to control into which target the 'stepIn' should occur.\nThe list of possible targets for a given source line can be retrieved via the 'stepInTargets' request.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "stepIn" ]
					},
					"arguments": {
						"$ref": "#/definitions/StepInArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"StepInArguments": {
			"type": "object",
			"description": "Arguments for 'stepIn' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Continue execution for this thread."
				},
				"targetId": {
					"type": "integer",
					"description": "Optional id of the target to step into."
				}
			},
			"required": [ "threadId" ]
		},
		"StepInResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'stepIn' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"StepOutRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "StepOut request; value of command field is 'stepOut'.\nThe request starts the debuggee to run again for one step.\nThe debug adapter first sends the StepOutResponse and then a StoppedEvent (event type 'step') after the step has completed.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "stepOut" ]
					},
					"arguments": {
						"$ref": "#/definitions/StepOutArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"StepOutArguments": {
			"type": "object",
			"description": "Arguments for 'stepOut' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Continue execution for this thread."
				}
			},
			"required": [ "threadId" ]
		},
		"StepOutResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'stepOut' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"StepBackRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "StepBack request; value of command field is 'stepBack'.\nThe request starts the debuggee to run one step backwards.\nThe debug adapter first sends the StepBackResponse and then a StoppedEvent (event type 'step') after the step has completed.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "stepBack" ]
					},
					"arguments": {
						"$ref": "#/definitions/StepBackArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"StepBackArguments": {
			"type": "object",
			"description": "Arguments for 'stepBack' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Continue execution for this thread."
				}
			},
			"required": [ "threadId" ]
		},
		"StepBackResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'stepBack' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"RestartFrameRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "RestartFrame request; value of command field is 'restartFrame'.\nThe request restarts execution of the specified stackframe.\nThe debug adapter first sends the RestartFrameResponse and then a StoppedEvent (event type 'restart') after the restart has completed.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "restartFrame" ]
					},
					"arguments": {
						"$ref": "#/definitions/RestartFrameArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"RestartFrameArguments": {
			"type": "object",
			"description": "Arguments for 'restartFrame' request.",
			"properties": {
				"frameId": {
					"type": "integer",
					"description": "Restart this stackframe."
				}
			},
			"required": [ "frameId" ]
		},
		"RestartFrameResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'restartFrame' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"GotoRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Goto request; value of command field is 'goto'.\nThe request sets the location where the debuggee will continue to run.\nThis makes it possible to skip the execution of code or to executed code again.\nThe code between the current location and the goto target is not executed but skipped.\nThe debug adapter first sends the GotoResponse and then a StoppedEvent (event type 'goto').",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "goto" ]
					},
					"arguments": {
						"$ref": "#/definitions/GotoArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"GotoArguments": {
			"type": "object",
			"description": "Arguments for 'goto' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Set the goto target for this thread."
				},
				"targetId": {
					"type": "integer",
					"description": "The location where the debuggee will continue to run."
				}
			},
			"required": [ "threadId", "targetId" ]
		},
		"GotoResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'goto' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"PauseRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Pause request; value of command field is 'pause'.\nThe request suspenses the debuggee.\nThe debug adapter first sends the PauseResponse and then a StoppedEvent (event type 'pause') after the thread has been paused successfully.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "pause" ]
					},
					"arguments": {
						"$ref": "#/definitions/PauseArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"PauseArguments": {
			"type": "object",
			"description": "Arguments for 'pause' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Pause execution for this thread."
				}
			},
			"required": [ "threadId" ]
		},
		"PauseResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'pause' request. This is just an acknowledgement, so no body field is required."
			}]
		},

		"StackTraceRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "StackTrace request; value of command field is 'stackTrace'. The request returns a stacktrace from the current execution state.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "stackTrace" ]
					},
					"arguments": {
						"$ref": "#/definitions/StackTraceArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"StackTraceArguments": {
			"type": "object",
			"description": "Arguments for 'stackTrace' request.",
			"properties": {
				"threadId": {
					"type": "integer",
					"description": "Retrieve the stacktrace for this thread."
				},
				"startFrame": {
					"type": "integer",
					"description": "The index of the first frame to return; if omitted frames start at 0."
				},
				"levels": {
					"type": "integer",
					"description": "The maximum number of frames to return. If levels is not specified or 0, all frames are returned."
				}
			},
			"required": [ "threadId" ]
		},
		"StackTraceResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'stackTrace' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"stackFrames": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/StackFrame"
								},
								"description": "The frames of the stackframe. If the array has length zero, there are no stackframes available.\nThis means that there is no location information available."
							},
							"totalFrames": {
								"type": "integer",
								"description": "The total number of frames available."
							}
						},
						"required": [ "stackFrames" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"ScopesRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Scopes request; value of command field is 'scopes'.\nThe request returns the variable scopes for a given stackframe ID.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "scopes" ]
					},
					"arguments": {
						"$ref": "#/definitions/ScopesArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"ScopesArguments": {
			"type": "object",
			"description": "Arguments for 'scopes' request.",
			"properties": {
				"frameId": {
					"type": "integer",
					"description": "Retrieve the scopes for this stackframe."
				}
			},
			"required": [ "frameId" ]
		},
		"ScopesResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'scopes' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"scopes": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Scope"
								},
								"description": "The scopes of the stackframe. If the array has length zero, there are no scopes available."
							}
						},
						"required": [ "scopes" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"VariablesRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Variables request; value of command field is 'variables'.\nRetrieves all child variables for the given variable reference.\nAn optional filter can be used to limit the fetched children to either named or indexed children.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "variables" ]
					},
					"arguments": {
						"$ref": "#/definitions/VariablesArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"VariablesArguments": {
			"type": "object",
			"description": "Arguments for 'variables' request.",
			"properties": {
				"variablesReference": {
					"type": "integer",
					"description": "The Variable reference."
				},
				"filter": {
					"type": "string",
					"enum": [ "indexed", "named" ],
					"description": "Optional filter to limit the child variables to either named or indexed. If ommited, both types are fetched."
				},
				"start": {
					"type": "integer",
					"description": "The index of the first variable to return; if omitted children start at 0."
				},
				"count": {
					"type": "integer",
					"description": "The number of variables to return. If count is missing or 0, all variables are returned."
				}
			},
			"required": [ "variablesReference" ]
		},
		"VariablesResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'variables' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"variables": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Variable"
								},
								"description": "All (or a range) of variables for the given variable reference."
							}
						},
						"required": [ "variables" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"SetVariableRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "setVariable request; value of command field is 'setVariable'.\nSet the variable with the given name in the variable container to a new value.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "setVariable" ]
					},
					"arguments": {
						"$ref": "#/definitions/SetVariableArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"SetVariableArguments": {
			"type": "object",
			"description": "Arguments for 'setVariable' request.",
			"properties": {
				"variablesReference": {
					"type": "integer",
					"description": "The reference of the variable container."
				},
				"name": {
					"type": "string",
					"description": "The name of the variable."
				},
				"value": {
					"type": "string",
					"description": "The value of the variable."
				}
			},
			"required": [ "variablesReference", "name", "value" ]
		},
		"SetVariableResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'setVariable' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"value": {
								"type": "string",
								"description": "The new value of the variable."
							},
							"type": {
								"type": "string",
								"description": "The type of the new value. Typically shown in the UI when hovering over the value."
							},
							"variablesReference": {
								"type": "number",
								"description": "If variablesReference is > 0, the new value is structured and its children can be retrieved by passing variablesReference to the VariablesRequest."
							},
							"namedVariables": {
								"type": "number",
								"description": "The number of named child variables.\nThe client can use this optional information to present the variables in a paged UI and fetch them in chunks."
							},
							"indexedVariables": {
								"type": "number",
								"description": "The number of indexed child variables.\nThe client can use this optional information to present the variables in a paged UI and fetch them in chunks."
							}
						},
						"required": [ "value" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"SourceRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Source request; value of command field is 'source'.\nThe request retrieves the source code for a given source reference.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "source" ]
					},
					"arguments": {
						"$ref": "#/definitions/SourceArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"SourceArguments": {
			"type": "object",
			"description": "Arguments for 'source' request.",
			"properties": {
				"sourceReference": {
					"type": "integer",
					"description": "The reference to the source. This is the value received in Source.reference."
				}
			},
			"required": [ "sourceReference" ]
		},
		"SourceResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'source' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"content": {
								"type": "string",
								"description": "Content of the source reference."
							},
							"mimeType": {
								"type": "string",
								"description": "Optional content type (mime type) of the source."
							}
						},
						"required": [ "content" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"ThreadsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Thread request; value of command field is 'threads'.\nThe request retrieves a list of all threads.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "threads" ]
					}
				},
				"required": [ "command" ]
			}]
		},
		"ThreadsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'threads' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"threads": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Thread"
								},
								"description": "All threads."
							}
						},
						"required": [ "threads" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"ModulesRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Modules can be retrieved from the debug adapter with the ModulesRequest which can either return all modules or a range of modules to support paging.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "modules" ]
					},
					"arguments": {
						"$ref": "#/definitions/ModulesArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"ModulesArguments": {
			"type": "object",
			"description": "Arguments for 'modules' request.",
			"properties": {
				"startModule": {
					"type": "integer",
					"description": "The index of the first module to return; if omitted modules start at 0."
				},
				"moduleCount": {
					"type": "integer",
					"description": "The number of modules to return. If moduleCount is not specified or 0, all modules are returned."
				}
			}
		},
		"ModulesResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'modules' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"modules": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/Module"
								},
								"description": "All modules or range of modules."
							},
							"totalModules": {
								"type": "integer",
								"description": "The total number of modules available."
							}
						},
						"required": [ "modules" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"EvaluateRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "Evaluate request; value of command field is 'evaluate'.\nEvaluates the given expression in the context of the top most stack frame.\nThe expression has access to any variables and arguments that are in scope.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "evaluate" ]
					},
					"arguments": {
						"$ref": "#/definitions/EvaluateArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"EvaluateArguments": {
			"type": "object",
			"description": "Arguments for 'evaluate' request.",
			"properties": {
				"expression": {
					"type": "string",
					"description": "The expression to evaluate."
				},
				"frameId": {
					"type": "integer",
					"description": "Evaluate the expression in the scope of this stack frame. If not specified, the expression is evaluated in the global scope."
				},
				"context": {
					"type": "string",
					"_enum": [ "watch", "repl", "hover" ],
					"description": "The context in which the evaluate request is run. Possible values are 'watch' if evaluate is run in a watch, 'repl' if run from the REPL console, or 'hover' if run from a data hover."
				}
			},
			"required": [ "expression" ]
		},
		"EvaluateResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'evaluate' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"result": {
								"type": "string",
								"description": "The result of the evaluate request."
							},
							"type": {
								"type": "string",
								"description": "The optional type of the evaluate result."
							},
							"variablesReference": {
								"type": "number",
								"description": "If variablesReference is > 0, the evaluate result is structured and its children can be retrieved by passing variablesReference to the VariablesRequest."
							},
							"namedVariables": {
								"type": "number",
								"description": "The number of named child variables.\nThe client can use this optional information to present the variables in a paged UI and fetch them in chunks."
							},
							"indexedVariables": {
								"type": "number",
								"description": "The number of indexed child variables.\nThe client can use this optional information to present the variables in a paged UI and fetch them in chunks."
							}
						},
						"required": [ "result", "variablesReference" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"StepInTargetsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "StepInTargets request; value of command field is 'stepInTargets'.\nThis request retrieves the possible stepIn targets for the specified stack frame.\nThese targets can be used in the 'stepIn' request.\nThe StepInTargets may only be called if the 'supportsStepInTargetsRequest' capability exists and is true.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "stepInTargets" ]
					},
					"arguments": {
						"$ref": "#/definitions/StepInTargetsArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"StepInTargetsArguments": {
			"type": "object",
			"description": "Arguments for 'stepInTargets' request.",
			"properties": {
				"frameId": {
					"type": "integer",
					"description": "The stack frame for which to retrieve the possible stepIn targets."
				}
			},
			"required": [ "frameId" ]
		},
		"StepInTargetsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'stepInTargets' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"targets": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/StepInTarget"
								},
								"description": "The possible stepIn targets of the specified source location."
							}
						},
						"required": [ "targets" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"GotoTargetsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "GotoTargets request; value of command field is 'gotoTargets'.\nThis request retrieves the possible goto targets for the specified source location.\nThese targets can be used in the 'goto' request.\nThe GotoTargets request may only be called if the 'supportsGotoTargetsRequest' capability exists and is true.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "gotoTargets" ]
					},
					"arguments": {
						"$ref": "#/definitions/GotoTargetsArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"GotoTargetsArguments": {
			"type": "object",
			"description": "Arguments for 'gotoTargets' request.",
			"properties": {
				"source": {
					"$ref": "#/definitions/Source",
					"description": "The source location for which the goto targets are determined."
				},
				"line": {
					"type": "integer",
					"description": "The line location for which the goto targets are determined."
				},
				"column": {
					"type": "integer",
					"description": "An optional column location for which the goto targets are determined."
				}
			},
			"required": [ "source", "line" ]
		},
		"GotoTargetsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'gotoTargets' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"targets": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/GotoTarget"
								},
								"description": "The possible goto targets of the specified location."
							}
						},
						"required": [ "targets" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"CompletionsRequest": {
			"allOf": [ { "$ref": "#/definitions/Request" }, {
				"type": "object",
				"description": "CompletionsRequest request; value of command field is 'completions'.\nReturns a list of possible completions for a given caret position and text.\nThe CompletionsRequest may only be called if the 'supportsCompletionsRequest' capability exists and is true.",
				"properties": {
					"command": {
						"type": "string",
						"enum": [ "completions" ]
					},
					"arguments": {
						"$ref": "#/definitions/CompletionsArguments"
					}
				},
				"required": [ "command", "arguments"  ]
			}]
		},
		"CompletionsArguments": {
			"type": "object",
			"description": "Arguments for 'completions' request.",
			"properties": {
				"frameId": {
					"type": "integer",
					"description": "Returns completions in the scope of this stack frame. If not specified, the completions are returned for the global scope."
				},
				"text": {
					"type": "string",
					"description": "One or more source lines. Typically this is the text a user has typed into the debug console before he asked for completion."
				},
				"column": {
					"type": "integer",
					"description": "The character position for which to determine the completion proposals."
				},
				"line": {
					"type": "integer",
					"description": "An optional line for which to determine the completion proposals. If missing the first line of the text is assumed."
				}
			},
			"required": [ "text", "column" ]
		},
		"CompletionsResponse": {
			"allOf": [ { "$ref": "#/definitions/Response" }, {
				"type": "object",
				"description": "Response to 'completions' request.",
				"properties": {
					"body": {
						"type": "object",
						"properties": {
							"targets": {
								"type": "array",
								"items": {
									"$ref": "#/definitions/CompletionItem"
								},
								"description": "The possible completions for ."
							}
						},
						"required": [ "targets" ]
					}
				},
				"required": [ "body" ]
			}]
		},

		"Capabilities": {
			"type": "object",
			"description": "Information about the capabilities of a debug adapter.",
			"properties": {
				"supportsConfigurationDoneRequest": {
					"type": "boolean",
					"description": "The debug adapter supports the configurationDoneRequest."
				},
				"supportsFunctionBreakpoints": {
					"type": "boolean",
					"description": "The debug adapter supports function breakpoints."
				},
				"supportsConditionalBreakpoints": {
					"type": "boolean",
					"description": "The debug adapter supports conditional breakpoints."
				},
				"supportsHitConditionalBreakpoints": {
					"type": "boolean",
					"description": "The debug adapter supports breakpoints that break execution after a specified number of hits."
				},
				"supportsEvaluateForHovers": {
					"type": "boolean",
					"description": "The debug adapter supports a (side effect free) evaluate request for data hovers."
				},
				"exceptionBreakpointFilters": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ExceptionBreakpointsFilter"
					},
					"description": "Available filters for the setExceptionBreakpoints request."
				},
				"supportsStepBack": {
					"type": "boolean",
					"description": "The debug adapter supports stepping back."
				},
				"supportsSetVariable": {
					"type": "boolean",
					"description": "The debug adapter supports setting a variable to a value."
				},
				"supportsRestartFrame": {
					"type": "boolean",
					"description": "The debug adapter supports restarting a frame."
				},
				"supportsGotoTargetsRequest": {
					"type": "boolean",
					"description": "The debug adapter supports the gotoTargetsRequest."
				},
				"supportsStepInTargetsRequest": {
					"type": "boolean",
					"description": "The debug adapter supports the stepInTargetsRequest."
				},
				"supportsCompletionsRequest": {
					"type": "boolean",
					"description": "The debug adapter supports the completionsRequest."
				},
				"supportsModulesRequest": {
					"type": "boolean",
					"description": "The debug adapter supports the modules request."
				},
				"additionalModuleColumns": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColumnDescriptor"
					},
					"description": "The set of additional module information exposed by the debug adapter."
				},
				"supportedChecksumAlgorithms": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ChecksumAlgorithm"
					},
					"description": "Checksum algorithms supported by the debug adapter."
				}
			}
		},

		"ExceptionBreakpointsFilter": {
			"type": "object",
			"description": "An ExceptionBreakpointsFilter is shown in the UI as an option for configuring how exceptions are dealt with.",
			"properties": {
				"filter": {
					"type": "string",
					"description": "The internal ID of the filter. This value is passed to the setExceptionBreakpoints request."
				},
				"label": {
					"type": "string",
					"description": "The name of the filter. This will be shown in the UI."
				},
				"default": {
					"type": "boolean",
					"description": "Initial value of the filter. If not specified a value 'false' is assumed."
				}
			},
			"required": [ "filter", "label" ]
		},

		"Message": {
			"type": "object",
			"description": "A structured message object. Used to return errors from requests.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "Unique identifier for the message."
				},
				"format": {
					"type": "string",
					"description": "A format string for the message. Embedded variables have the form '{name}'.\nIf variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes."
				},
				"variables": {
					"type": "object",
					"description": "An object used as a dictionary for looking up the variables in the format string.",
					"additionalProperties": {
						"type": "string",
						"description": "Values must be strings."
					}
				},
				"sendTelemetry": {
					"type": "boolean",
					"description": "If true send to telemetry."
				},
				"showUser": {
					"type": "boolean",
					"description": "If true show user."
				},
				"url": {
					"type": "string",
					"description": "An optional url where additional information about this message can be found."
				},
				"urlLabel": {
					"type": "string",
					"description": "An optional label that is presented to the user as the UI for opening the url."
				}
			},
			"required": [ "id", "format" ]
		},

		"Module": {
			"type": "object",
			"description": "A Module object represents a row in the modules view.\nTwo attributes are mandatory: an id identifies a module in the modules view and is used in a ModuleEvent for identifying a module for adding, updating or deleting.\nThe name is used to minimally render the module in the UI.\n\nAdditional attributes can be added to the module. They will show up in the module View if they have a corresponding ColumnDescriptor.\n\nTo avoid an unnecessary proliferation of additional attributes with similar semantics but different names\nwe recommend to re-use attributes from the 'recommended' list below first, and only introduce new attributes if nothing appropriate could be found.",
			"properties": {
				"id": {
					"type": ["integer", "string"],
					"description": "Unique identifier for the module."
				},
				"name": {
					"type": "string",
					"description": "A name of the module."
				},
				"path": {
					"type": "string",
					"description": "optional but recommended attributes.\nalways try to use these first before introducing additional attributes.\n\nLogical full path to the module. The exact definition is implementation defined, but usually this would be a full path to the on-disk file for the module."
				},
				"isOptimized": {
					"type": "boolean",
					"description": "True if the module is optimized."
				},
				"isUserCode": {
					"type": "boolean",
					"description": "True if the module is considered 'user code' by a debugger that supports 'Just My Code'."
				},
				"version": {
					"type": "string",
					"description": "Version of Module."
				},
				"symbolStatus": {
					"type": "string",
					"description": "User understandable description of if symbols were found for the module (ex: 'Symbols Loaded', 'Symbols not found', etc."
				},
				"symbolFilePath": {
					"type": "string",
					"description": "Logical full path to the symbol file. The exact definition is implementation defined."
				},
				"dateTimeStamp": {
					"type": "string",
					"description": "Module created or modified."
				},
				"addressRange": {
					"type": "string",
					"description": "Address range covered by this module."
				}
			},
			"required": [ "id", "name" ]
		},

		"ColumnDescriptor": {
			"type": "object",
			"description": "A ColumnDescriptor specifies what module attribute to show in a column of the ModulesView, how to format it, and what the column's label should be.\nIt is only used if the underlying UI actually supports this level of customization.",
			"properties": {
				"attributeName": {
					"type": "string",
					"description": "Name of the attribute rendered in this column."
				},
				"label": {
					"type": "string",
					"description": "Header UI label of column."
				},
				"format": {
					"type": "string",
					"description": "Format to use for the rendered values in this column. TBD how the format strings looks like."
				},
				"type": {
					"type": "string",
					"enum": [ "string", "number", "boolean", "unixTimestampUTC" ],
					"description": "Datatype of values in this column.  Defaults to 'string' if not specified."
				},
				"width": {
					"type": "integer",
					"description": "Width of this column in characters (hint only)."
				}
			},
			"required": [ "attributeName", "label"]
		},

		"ModulesViewDescriptor": {
			"type": "object",
			"description": "The ModulesViewDescriptor is the container for all declarative configuration options of a ModuleView.\nFor now it only specifies the columns to be shown in the modules view.",
			"properties": {
				"columns": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ColumnDescriptor"
					}
				}
			},
			"required": [ "columns" ]
		},

		"Thread": {
			"type": "object",
			"description": "A Thread",
			"properties": {
				"id": {
					"type": "integer",
					"description": "Unique identifier for the thread."
				},
				"name": {
					"type": "string",
					"description": "A name of the thread."
				}
			},
			"required": [ "id", "name" ]
		},

		"Source": {
			"type": "object",
			"description": "A Source is a descriptor for source code. It is returned from the debug adapter as part of a StackFrame and it is used by clients when specifying breakpoints.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The short name of the source. Every source returned from the debug adapter has a name. When specifying a source to the debug adapter this name is optional."
				},
				"path": {
					"type": "string",
					"description": "The long (absolute) path of the source. It is not guaranteed that the source exists at this location."
				},
				"sourceReference": {
					"type": "number",
					"description": "If sourceReference > 0 the contents of the source can be retrieved through the SourceRequest. A sourceReference is only valid for a session, so it must not be used to persist a source."
				},
				"origin": {
					"type": "string",
					"description": "The (optional) origin of this source: possible values 'internal module', 'inlined content from source map', etc."
				},
				"adapterData": {
					"type": [ "array", "boolean", "integer", "null", "number", "object", "string" ],
					"description": "Optional data that a debug adapter might want to loop through the client. The client should leave the data intact and persist it across sessions. The client should not interpret the data."
				},
				"checksums": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Checksum"
					},
					"description": "The checksums associated with this file."
				}
			}
		},

		"StackFrame": {
			"type": "object",
			"description": "A Stackframe contains the source location.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "An identifier for the stack frame. It must be unique across all threads. This id can be used to retrieve the scopes of the frame with the 'scopesRequest' or to restart the execution of a stackframe."
				},
				"name": {
					"type": "string",
					"description": "The name of the stack frame, typically a method name."
				},
				"source": {
					"$ref": "#/definitions/Source",
					"description": "The optional source of the frame."
				},
				"line": {
					"type": "integer",
					"description": "The line within the file of the frame. If source is null or doesn't exist, line is 0 and must be ignored."
				},
				"column": {
					"type": "integer",
					"description": "The column within the line. If source is null or doesn't exist, column is 0 and must be ignored."
				},
				"endLine": {
					"type": "integer",
					"description": "An optional end line of the range covered by the stack frame."
				},
				"endColumn": {
					"type": "integer",
					"description": "An optional end column of the range covered by the stack frame."
				},
				"moduleId": {
					"type": ["integer", "string"],
					"description": "The module associated with this frame, if any."
				}
			},
			"required": [ "id", "name", "line", "column" ]
		},

		"Scope": {
			"type": "object",
			"description": "A Scope is a named container for variables. Optionally a scope can map to a source or a range within a source.",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the scope such as 'Arguments', 'Locals'."
				},
				"variablesReference": {
					"type": "integer",
					"description": "The variables of this scope can be retrieved by passing the value of variablesReference to the VariablesRequest."
				},
				"namedVariables": {
					"type": "integer",
					"description": "The number of named variables in this scope.\nThe client can use this optional information to present the variables in a paged UI and fetch them in chunks."
				},
				"indexedVariables": {
					"type": "integer",
					"description": "The number of indexed variables in this scope.\nThe client can use this optional information to present the variables in a paged UI and fetch them in chunks."
				},
				"expensive": {
					"type": "boolean",
					"description": "If true, the number of variables in this scope is large or expensive to retrieve."
				},
				"source": {
					"$ref": "#/definitions/Source",
					"description": "Optional source for this scope."
				},
				"line": {
					"type": "integer",
					"description": "Optional start line of the range covered by this scope."
				},
				"column": {
					"type": "integer",
					"description": "Optional start column of the range covered by this scope."
				},
				"endLine": {
					"type": "integer",
					"description": "Optional end line of the range covered by this scope."
				},
				"endColumn": {
					"type": "integer",
					"description": "Optional end column of the range covered by this scope."
				}
			},
			"required": [ "name", "variablesReference", "expensive" ]
		},

		"Variable": {
			"type": "object",
			"description": "A Variable is a name/value pair.\nOptionally a variable can have a 'type' that is shown if space permits or when hovering over the variable's name.\nAn optional 'kind' is used to render additional properties of the variable, e.g. different icons can be used to indicate that a variable is public or private.\nIf the value is structured (has children), a handle is provided to retrieve the children with the VariablesRequest.\nIf the number of named or indexed children is large, the numbers should be returned via the optional 'namedVariables' and 'indexedVariables' attributes.\nThe client can use this optional information to present the children in a paged UI and fetch them in chunks.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The variable's name."
				},
				"value": {
					"type": "string",
					"description": "The variable's value. For structured objects this can be a multi line text, e.g. for a function the body of a function."
				},
				"type": {
					"type": "string",
					"description": "The type of the variable's value. Typically shown in the UI when hovering over the value."
				},
				"kind": {
					"type": "string",
					"description": "Properties of a variable that can be used to determine how to render the variable in the UI. Format of the string value: TBD."
				},
				"evaluateName": {
					"type": "string",
					"description": "Optional evaluatable name of this variable which can be passed to the 'EvaluateRequest' to fetch the variable's value."
				},
				"variablesReference": {
					"type": "integer",
					"description": "If variablesReference is > 0, the variable is structured and its children can be retrieved by passing variablesReference to the VariablesRequest."
				},
				"namedVariables": {
					"type": "integer",
					"description": "The number of named child variables.\nThe client can use this optional information to present the children in a paged UI and fetch them in chunks."
				},
				"indexedVariables": {
					"type": "integer",
					"description": "The number of indexed child variables.\nThe client can use this optional information to present the children in a paged UI and fetch them in chunks."
				}
			},
			"required": [ "name", "value", "variablesReference" ]
		},

		"SourceBreakpoint": {
			"type": "object",
			"description": "Properties of a breakpoint passed to the setBreakpoints request.",
			"properties": {
				"line": {
					"type": "integer",
					"description": "The source line of the breakpoint."
				},
				"column": {
					"type": "integer",
					"description": "An optional source column of the breakpoint."
				},
				"condition": {
					"type": "string",
					"description": "An optional expression for conditional breakpoints."
				},
				"hitCondition": {
					"type": "string",
					"description": "An optional expression that controls how many hits of the breakpoint are ignored. The backend is expected to interpret the expression as needed."
				}
			},
			"required": [ "line" ]
		},

		"FunctionBreakpoint": {
			"type": "object",
			"description": "Properties of a breakpoint passed to the setFunctionBreakpoints request.",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the function."
				},
				"condition": {
					"type": "string",
					"description": "An optional expression for conditional breakpoints."
				},
				"hitCondition": {
					"type": "string",
					"description": "An optional expression that controls how many hits of the breakpoint are ignored. The backend is expected to interpret the expression as needed."
				}
			},
			"required": [ "name" ]
		},

		"Breakpoint": {
			"type": "object",
			"description": "Information about a Breakpoint created in setBreakpoints or setFunctionBreakpoints.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "An optional unique identifier for the breakpoint."
				},
				"verified": {
					"type": "boolean",
					"description": "If true breakpoint could be set (but not necessarily at the desired location)."
				},
				"message": {
					"type": "string",
					"description": "An optional message about the state of the breakpoint. This is shown to the user and can be used to explain why a breakpoint could not be verified."
				},
				"source": {
					"$ref": "#/definitions/Source",
					"description": "The source where the breakpoint is located."
				},
				"line": {
					"type": "integer",
					"description": "The start line of the actual range covered by the breakpoint."
				},
				"column": {
					"type": "integer",
					"description": "An optional start column of the actual range covered by the breakpoint."
				},
				"endLine": {
					"type": "integer",
					"description": "An optional end line of the actual range covered by the breakpoint."
				},
				"endColumn": {
					"type": "integer",
					"description": "An optional end column of the actual range covered by the breakpoint. If no end line is given, then the end column is assumed to be in the start line."
				}
			},
			"required": [ "verified" ]
		},

		"StepInTarget": {
			"type": "object",
			"description": "A StepInTarget can be used in the 'stepIn' request and determines into which single target the stepIn request should step.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "Unique identifier for a stepIn target."
				},
				"label": {
					"type": "string",
					"description": "The name of the stepIn target (shown in the UI)."
				}
			},
			"required": [ "id", "label" ]
		},

		"GotoTarget": {
			"type": "object",
			"description": "A GotoTarget describes a code location that can be used as a target in the 'goto' request.\nThe possible goto targets can be determined via the 'gotoTargets' request.",
			"properties": {
				"id": {
					"type": "integer",
					"description": "Unique identifier for a goto target. This is used in the goto request."
				},
				"label": {
					"type": "string",
					"description": "The name of the goto target (shown in the UI)."
				},
				"line": {
					"type": "integer",
					"description": "The line of the goto target."
				},
				"column": {
					"type": "integer",
					"description": "An optional column of the goto target."
				},
				"endLine": {
					"type": "integer",
					"description": "An optional end line of the range covered by the goto target."
				},
				"endColumn": {
					"type": "integer",
					"description": "An optional end column of the range covered by the goto target."
				}
			},
			"required": [ "id", "label", "line" ]
		},

		"CompletionItem": {
			"type": "object",
			"description": "CompletionItems are the suggestions returned from the CompletionsRequest.",
			"properties": {
				"label": {
					"type": "string",
					"description": "The label of this completion item. By default this is also the text that is inserted when selecting this completion."
				},
				"text": {
					"type": "string",
					"description": "If text is not falsy then it is inserted instead of the label."
				},
				"type": {
					"$ref": "#/definitions/CompletionItemType",
					"description": "The item's type. Typically the client uses this information to render the item in the UI with an icon."
				},
				"start": {
					"type": "integer",
					"description": "When a completion is selected it replaces 'length' characters starting at 'start' in the text passed to the CompletionsRequest.\nIf missing the frontend will try to determine these values heuristically."
				},
				"length": {
					"type": "integer"
				}
			},
			"required": [ "label" ]
		},

		"CompletionItemType": {
			"type": "string",
			"description": "Some predefined types for the CompletionItem. Please note that not all clients have specific icons for all of them.",
			"enum": [ "method", "function", "constructor", "field", "variable", "class", "interface", "module", "property", "unit", "value", "enum", "keyword", "snippet", "text", "color", "file", "reference", "customcolor" ]
		},

		"ChecksumAlgorithm": {
			"type": "string",
			"description": "Names of checksum algorithms that may be supported by a debug adapter.",
			"enum": [ "MD5", "SHA1", "SHA256", "SHA1Normalized", "SHA256Normalized", "timestamp" ]
		},

		"Checksum": {
			"type": "object",
			"description": "The checksum of an item calculated by the specified algorithm.",
			"properties": {
				"algorithm": {
					"$ref": "#/definitions/ChecksumAlgorithm",
					"description": "The algorithm used to calculate this checksum."
				},
				"checksum": {
					"type": "string",
					"description": "Value of the checksum."
				}
			},
			"required": [ "algorithm", "checksum" ]
		}
	}
}
